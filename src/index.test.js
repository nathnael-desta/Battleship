/**
 * @jest-environment jsdom
 */

import { insertAt, getTile, finalTile, occupies, removeDiv, checkIfFlipIsOk , insertInsideArray, checkIfInsertable, addableSquares} from "./board.js";


describe("insertion tests", () => {
  const myShips = {
    single_vertical: { name: "sv", alignment: "vertical", delete: 1 },
    single_horizontal: { name: "sh", alignment: "horizontal", delete: 1 },
    double_vertical: { name: "dv", alignment: "vertical", delete: 2 },
    double_horizontal: { name: "dh", alignment: "horizontal", delete: 2 },
    tri_vertical: { name: "tv", alignment: "vertical", delete: 3 },
    tri_horizontal: { name: "th", alignment: "horizontal", delete: 3 },
    quad_vertical: { name: "qv", alignment: "vertical", delete: 4 },
    quad_horizontal: { name: "qh", alignment: "horizontal", delete: 4 },
  };

  // const fs = require('fs');
  // const JSDOM = require('jsdom').JSDOM;

  // process.chdir(__dirname);
  // const htmlContent = fs.readFileSync('./index.ejs', 'utf8');
  // const dom = new JSDOM(htmlContent);
  // const document = dom.window.document;

  // const tiles = document.querySelectorAll(".tiles");
  // const playerTiles = document.querySelector(".player .tiles");
  // const opponentTiles = document.querySelector(".opponent .tiles");
  // const main = document.querySelector('.main');
  // console.log("...........................................................................", document)

  test("inset tests", () => {
    expect(insertAt("F", 2, "single_vertical", myShips)).toEqual({
      del: [["F", 2]],
      insert: "sv",
      start: ["F", 2],
    });

    expect(insertAt("J", 1, "double_vertical", myShips)).toEqual({
      del: [
        ["J", 1],
        ["J", 2],
      ],
      insert: "dv",
      start: ["J", 1],
    });

    expect(insertAt("A", 3, "double_horizontal", myShips)).toEqual({
      del: [
        ["A", 3],
        ["B", 3],
      ],
      insert: "dh",
      start: ["A", 3],
    });

    expect(insertAt("B", 3, "double_horizontal", myShips)).toEqual({
      del: [
        ["B", 3],
        ["C", 3],
      ],
      insert: "dh",
      start: ["B", 3],
    });

    expect(insertAt("C", 3, "single_horizontal", myShips)).toEqual({
      del: [
        ["C", 3],
      ],
      insert: "sh",
      start: ["C", 3],
    });

    expect(insertAt("J", 1, "double_horizontal", myShips)).toEqual({
      del: [
        ["I", 1],
        ["J", 1],
      ],
      insert: "dh",
      start: ["I", 1],
    });

    expect(insertAt("J", 10, "double_vertical", myShips)).toEqual({
      del: [
        ["J", 9],
        ["J", 10],
      ],
      insert: "dv",
      start: ["J", 9],
    });

    expect(insertAt("J", 10, "quad_vertical", myShips)).toEqual({
      del: [
        ["J", 7],
        ["J", 8],
        ["J", 9],
        ["J", 10],
      ],
      insert: "qv",
      start: ["J", 7],
    });

    expect(insertAt("J", -1, "quad_vertical", myShips)).toEqual(
      "incorrect input"
    );

    expect(insertAt("J", 11, "quad_vertical", myShips)).toEqual(
      "incorrect input"
    );

    expect(insertAt("K", 1, "quad_vertical", myShips)).toEqual(
      "incorrect input"
    );

    expect(insertAt("F", 2, "single_horizontal", myShips)).toEqual({
      del: [["F", 2]],
      insert: "sh",
      start: ["F", 2],
    });

    expect(insertAt("E", 4, "double_vertical", myShips)).toEqual({
      del: [["E", 4], ["E", 5]],
      insert: "dv",
      start: ["E", 4],
    });

    expect(insertAt("J", 1, "double_horizontal", myShips)).toEqual({
      del: [
        ["I", 1],
        ["J", 1],
      ],
      insert: "dh",
      start: ["I", 1],
    });

    expect(insertAt("J", 10, "double_horizontal", myShips)).toEqual({
      del: [
        ["I", 10],
        ["J", 10],
      ],
      insert: "dh",
      start: ["I", 10],
    });

    expect(insertAt("J", 10, "quad_horizontal", myShips)).toEqual({
      del: [
        ["G", 10],
        ["H", 10],
        ["I", 10],
        ["J", 10],
      ],
      insert: "qh",
      start: ["G", 10],
    });

    expect(insertAt("E", 3, "quad_horizontal", myShips)).toEqual({
      del: [
        ["E", 3],
        ["F", 3],
        ["G", 3],
        ["H", 3],
      ],
      insert: "qh",
      start: ["E", 3],
    });
  });

  test("final tile", () => {
    const circleData1 = {
      shift: 1,
      alignment: "horizontal",
    };

    const circleData2 = {
      shift: 2,
      alignment: "horizontal",
    };

    expect(finalTile("E", 4, circleData1)).toEqual({
      finalCol: "F",
      finalRow: 4,
    });

    expect(finalTile("H", 10, circleData2)).toEqual({
      finalCol: "J",
      finalRow: 10,
    });
  });

  test("occupies", () => {
    const piece1 = "tri_vertical";
    const piece2 = "quad_horizontal";
    const pieceSquare1 = 40;
    const pieceSquare2 = 40;
    expect(occupies(piece1, pieceSquare1)).toEqual(["40", "50", "60"]);

    expect(occupies(piece2, pieceSquare2)).toEqual(["40", "41", "42", "43"]);
  });

  test("removeDiv", () => {
    const numbers = [[32, 33, 34, 35], [43, 44, 45], [54, 55], [65]];
    const piece = [
      "quad_horizontal",
      "tri_horizontal",
      "double_horizontal",
      "single_horizontal",
    ];
    const pieceSquare = [32, 43, 54, 65];
    const occupiedSquares = [
      ["32", "33", "34", "35"],
      ["43", "44", "45"],
      ["54", "55"],
      ["65"],
    ];
    const okToDraw = [32, 43, 54, 65];

    expect(
      removeDiv("F", 4, numbers, piece, pieceSquare, occupiedSquares, okToDraw)
    ).toEqual({
      numbers: [[43, 44, 45], [54, 55], [65]],
      piece: ["tri_horizontal", "double_horizontal", "single_horizontal"],
      pieceSquare: [43, 54, 65],
      occupiedSquares: [["43", "44", "45"], ["54", "55"], ["65"]],
      okToDraw: [43, 54, 65],
    });
  });

  test("check if we can flip to vertical", () => {
    const occupiedSquares = [
        [
            "34",
            "35",
            "36",
            "37"
        ],
        [
            "44",
            "45"
        ],
        [
            "46",
            "47"
        ]
    ];

    const occupiedSquares2 = [
        [
            "83",
            "84",
            "85",
            "86"
        ],
        [
            "74"
        ]
    ];
    const shipName = "quad_horizontal"

    expect(checkIfFlipIsOk("F", 4, occupiedSquares, shipName)).toEqual(
        false
    );

    expect(checkIfFlipIsOk("E", 9, occupiedSquares2, shipName)).toEqual(
        false
    )

    expect(checkIfFlipIsOk("F", 9, occupiedSquares2, shipName)).toEqual(
        true
    )
  });

  test("checkIfInsertable", () => {
    const qhBoard = [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85", "86", "87", "88", "89",
      "90", "91", "92", "93", "94", "95", "quad_horizontal", "-", "-",
      "-"
    ]

    const board2 = [
      "00", "01", "02", "03", "04", "tri_horizontal", "-", "-", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85", "86", "87", "88", "89",
      "90", "91", "92", "93", "94", "95", "96", "97", "98",
      "99"
    ];

    expect(checkIfInsertable("39", "quad_vertical", qhBoard)).toEqual(true);

    expect(checkIfInsertable("09", "double_horizontal", qhBoard)).toEqual(false);

    expect(checkIfInsertable("96", "single_vertical", qhBoard)).toEqual(false);

    expect(checkIfInsertable("05", "single_vertical", qhBoard)).toEqual(true);

    expect(checkIfInsertable("99", "single_vertical", qhBoard)).toEqual(false);

    expect(checkIfInsertable("95", "double_horizontal", qhBoard)).toEqual(false);

    expect(checkIfInsertable("95", "double_vertical", qhBoard)).toEqual(false);

    expect(checkIfInsertable("85", "double_horizontal", qhBoard)).toEqual(true);

    expect(checkIfInsertable("85", "double_vertical", qhBoard)).toEqual(true);

    expect(checkIfInsertable("89", "double_horizontal", qhBoard)).toEqual(false);

    expect(checkIfInsertable("90", "double_vertical", qhBoard)).toEqual(false);

    expect(checkIfInsertable("69", "quad_vertical", qhBoard)).toEqual(false);

    expect(checkIfInsertable("65", "quad_vertical", qhBoard)).toEqual(true);
    
  })

  test("insertInsideArray", () => {
    const obj1 = {
      del: [
        ["J", 7],
        ["J", 8],
        ["J", 9],
        ["J", 10],
      ],
      insert: "qv",
      start: ["J", 7],
    }

    const obj2 = {
      del: [
        ["G", 10],
        ["H", 10],
        ["I", 10],
        ["J", 10],
      ],
      insert: "qh",
      start: ["G", 10],
    };

    const board = [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85", "86", "87", "88", "89",
      "90", "91", "92", "93", "94", "95", "96", "97", "98",
      "99"
    ];

    const board2 = [
      "00", "01", "02", "03", "04", "tri_horizontal", "-", "-", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85", "86", "87", "88", "89",
      "90", "91", "92", "93", "94", "95", "96", "97", "98",
      "99"
    ];

    const board3 = [
      "00", "01", "02", "03", "04", "single_horizontal", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "quad_horizontal", "-", "-",
      "-", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85", "86", "87", "88", "89",
      "90", "91", "92", "93", "94", "95", "96", "97", "98",
      "99"
    ];

    expect(checkIfInsertable("28", "tri_vertical", board3)).toEqual(true);

    expect(checkIfInsertable("75", "tri_vertical", insertInsideArray(insertAt("D", 7, "tri_vertical", myShips), insertInsideArray(insertAt("F", 5, "quad_vertical", myShips), board)))).toEqual(false)

    expect(insertInsideArray(insertAt("I", 3, "tri_vertical", myShips), board3)).toEqual(
      [
        "00", "01", "02", "03", "04", "single_horizontal", "06", "07", "08",
        "09", "10", "11", "12", "13", "14", "15", "16", "17",
        "18", "19", "20", "21", "22", "23", "quad_horizontal", "-", "-",
        "-", "tri_vertical", "29", "30", "31", "32", "33", "34", "35",
        "36", "37", "-", "39", "40", "41", "42", "43", "44",
        "45", "46", "47", "-", "49", "50", "51", "52", "53",
        "54", "55", "56", "57", "58", "59", "60", "61", "62",
        "63", "64", "65", "66", "67", "68", "69", "70", "71",
        "72", "73", "74", "75", "76", "77", "78", "79", "80",
        "81", "82", "83", "84", "85", "86", "87", "88", "89",
        "90", "91", "92", "93", "94", "95", "96", "97", "98",
        "99"
      ]
    )

    expect(insertInsideArray(insertAt("E", 3, "quad_horizontal", myShips), board)).toEqual(
      [
        "00", "01", "02", "03", "04", "05", "06", "07", "08",
        "09", "10", "11", "12", "13", "14", "15", "16", "17",
        "18", "19", "20", "21", "22", "23", "quad_horizontal", "-", "-",
        "-", "28", "29", "30", "31", "32", "33", "34", "35",
        "36", "37", "38", "39", "40", "41", "42", "43", "44",
        "45", "46", "47", "48", "49", "50", "51", "52", "53",
        "54", "55", "56", "57", "58", "59", "60", "61", "62",
        "63", "64", "65", "66", "67", "68", "69", "70", "71",
        "72", "73", "74", "75", "76", "77", "78", "79", "80",
        "81", "82", "83", "84", "85", "86", "87", "88", "89",
        "90", "91", "92", "93", "94", "95", "96", "97", "98",
        "99"
      ]
    )

    expect(checkIfInsertable("08", "double_horizontal", board2)).toEqual(true);

    expect(insertInsideArray(insertAt("I", 1, "double_horizontal", myShips), board2)).toEqual(
      [
        "00", "01", "02", "03", "04", "tri_horizontal", "-", "-", "double_horizontal",
        "-", "10", "11", "12", "13", "14", "15", "16", "17",
        "18", "19", "20", "21", "22", "23", "24", "25", "26",
        "27", "28", "29", "30", "31", "32", "33", "34", "35",
        "36", "37", "38", "39", "40", "41", "42", "43", "44",
        "45", "46", "47", "48", "49", "50", "51", "52", "53",
        "54", "55", "56", "57", "58", "59", "60", "61", "62",
        "63", "64", "65", "66", "67", "68", "69", "70", "71",
        "72", "73", "74", "75", "76", "77", "78", "79", "80",
        "81", "82", "83", "84", "85", "86", "87", "88", "89",
        "90", "91", "92", "93", "94", "95", "96", "97", "98",
        "99"
      ]
    )

    expect(insertInsideArray(insertAt("J", 10, "quad_vertical", myShips), board)).toEqual(
      [
        "00", "01", "02", "03", "04", "05", "06", "07", "08",
        "09", "10", "11", "12", "13", "14", "15", "16", "17",
        "18", "19", "20", "21", "22", "23", "24", "25", "26",
        "27", "28", "29", "30", "31", "32", "33", "34", "35",
        "36", "37", "38", "39", "40", "41", "42", "43", "44",
        "45", "46", "47", "48", "49", "50", "51", "52", "53",
        "54", "55", "56", "57", "58", "59", "60", "61", "62",
        "63", "64", "65", "66", "67", "68", "quad_vertical", "70", "71",
        "72", "73", "74", "75", "76", "77", "78", "-", "80",
        "81", "82", "83", "84", "85", "86", "87", "88", "-",
        "90", "91", "92", "93", "94", "95", "96", "97", "98",
        "-"
      ]
    )

    expect(insertInsideArray(insertAt("J", 10, "quad_horizontal", myShips), board)).toEqual(
      [
        "00", "01", "02", "03", "04", "05", "06", "07", "08",
        "09", "10", "11", "12", "13", "14", "15", "16", "17",
        "18", "19", "20", "21", "22", "23", "24", "25", "26",
        "27", "28", "29", "30", "31", "32", "33", "34", "35",
        "36", "37", "38", "39", "40", "41", "42", "43", "44",
        "45", "46", "47", "48", "49", "50", "51", "52", "53",
        "54", "55", "56", "57", "58", "59", "60", "61", "62",
        "63", "64", "65", "66", "67", "68", "69", "70", "71",
        "72", "73", "74", "75", "76", "77", "78", "79", "80",
        "81", "82", "83", "84", "85", "86", "87", "88", "89",
        "90", "91", "92", "93", "94", "95", "quad_horizontal", "-", "-",
        "-"
      ]
    )

    expect(insertInsideArray(obj1, board)).toEqual(
      [
        "00", "01", "02", "03", "04", "05", "06", "07", "08",
        "09", "10", "11", "12", "13", "14", "15", "16", "17",
        "18", "19", "20", "21", "22", "23", "24", "25", "26",
        "27", "28", "29", "30", "31", "32", "33", "34", "35",
        "36", "37", "38", "39", "40", "41", "42", "43", "44",
        "45", "46", "47", "48", "49", "50", "51", "52", "53",
        "54", "55", "56", "57", "58", "59", "60", "61", "62",
        "63", "64", "65", "66", "67", "68", "quad_vertical", "70", "71",
        "72", "73", "74", "75", "76", "77", "78", "-", "80",
        "81", "82", "83", "84", "85", "86", "87", "88", "-",
        "90", "91", "92", "93", "94", "95", "96", "97", "98",
        "-"
      ]
    )

    expect(insertInsideArray(obj2, board)).toEqual(
      [
        "00", "01", "02", "03", "04", "05", "06", "07", "08",
        "09", "10", "11", "12", "13", "14", "15", "16", "17",
        "18", "19", "20", "21", "22", "23", "24", "25", "26",
        "27", "28", "29", "30", "31", "32", "33", "34", "35",
        "36", "37", "38", "39", "40", "41", "42", "43", "44",
        "45", "46", "47", "48", "49", "50", "51", "52", "53",
        "54", "55", "56", "57", "58", "59", "60", "61", "62",
        "63", "64", "65", "66", "67", "68", "69", "70", "71",
        "72", "73", "74", "75", "76", "77", "78", "79", "80",
        "81", "82", "83", "84", "85", "86", "87", "88", "89",
        "90", "91", "92", "93", "94", "95", "quad_horizontal", "-", "-",
        "-"
      ]
    )
  })

test("addableSquares", () =>{
  const qhBoard = [
    "00", "01", "02", "03", "04", "05", "06", "07", "08",
    "09", "10", "11", "12", "13", "14", "15", "16", "17",
    "18", "19", "20", "21", "22", "23", "24", "25", "26",
    "27", "28", "29", "30", "31", "32", "33", "34", "35",
    "36", "37", "38", "39", "40", "41", "42", "43", "44",
    "45", "46", "47", "48", "49", "50", "51", "52", "53",
    "54", "55", "56", "57", "58", "59", "60", "61", "62",
    "63", "64", "65", "66", "67", "68", "69", "70", "71",
    "72", "73", "74", "75", "76", "77", "78", "79", "80",
    "81", "82", "83", "84", "85", "86", "87", "88", "89",
    "90", "91", "92", "93", "94", "95", "quad_horizontal", "-", "-",
    "-"
  ];

  expect(addableSquares("single_horizontal", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85", "86", "87", "88", "89",
      "90", "91", "92", "93", "94", "95"
    ]    
  )

  expect(addableSquares("double_horizontal", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
       "10", "11", "12", "13", "14", "15", "16", "17",
      "18",  "20", "21", "22", "23", "24", "25", "26",
      "27", "28",  "30", "31", "32", "33", "34", "35",
      "36", "37", "38",  "40", "41", "42", "43", "44",
      "45", "46", "47", "48",  "50", "51", "52", "53",
      "54", "55", "56", "57", "58",  "60", "61", "62",
      "63", "64", "65", "66", "67", "68",  "70", "71",
      "72", "73", "74", "75", "76", "77", "78",  "80",
      "81", "82", "83", "84", "85", "86", "87", "88", 
      "90", "91", "92", "93", "94"
    ]    
  )

  expect(addableSquares("tri_horizontal", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06", "07", "10", "11", "12", "13", "14", "15", "16", "17",
       "20", "21", "22", "23", "24", "25", "26",
      "27", "30", "31", "32", "33", "34", "35",
      "36", "37",  "40", "41", "42", "43", "44",
      "45", "46", "47",  "50", "51", "52", "53",
      "54", "55", "56", "57",  "60", "61", "62",
      "63", "64", "65", "66", "67",  "70", "71",
      "72", "73", "74", "75", "76", "77",  "80",
      "81", "82", "83", "84", "85", "86", "87", 
      "90", "91", "92", "93"
    ]    
  )

  expect(addableSquares("quad_horizontal", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06",  "10", "11", "12", "13", "14", "15", "16", "20", "21", "22", "23", "24", "25", "26",
       "30", "31", "32", "33", "34", "35",
      "36",  "40", "41", "42", "43", "44",
      "45", "46",  "50", "51", "52", "53",
      "54", "55", "56",  "60", "61", "62",
      "63", "64", "65", "66",  "70", "71",
      "72", "73", "74", "75", "76",  "80",
      "81", "82", "83", "84", "85", "86", 
      "90", "91", "92"
    ]    
  )

  expect(addableSquares("single_vertical", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85", "86", "87", "88", "89",
      "90", "91", "92", "93", "94", "95"
    ]
  )

  expect(addableSquares("double_vertical", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75", "76", "77", "78", "79", "80",
      "81", "82", "83", "84", "85",
    ]
  )

  expect(addableSquares("tri_vertical", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65", "66", "67", "68", "69", "70", "71",
      "72", "73", "74", "75",
    ]
  )

  expect(addableSquares("quad_vertical", qhBoard)).toEqual(
    [
      "00", "01", "02", "03", "04", "05", "06", "07", "08",
      "09", "10", "11", "12", "13", "14", "15", "16", "17",
      "18", "19", "20", "21", "22", "23", "24", "25", "26",
      "27", "28", "29", "30", "31", "32", "33", "34", "35",
      "36", "37", "38", "39", "40", "41", "42", "43", "44",
      "45", "46", "47", "48", "49", "50", "51", "52", "53",
      "54", "55", "56", "57", "58", "59", "60", "61", "62",
      "63", "64", "65"
    ]
  )

})
});
